///
/// @Generated by Mockolo
///



import APIServices
import Entities
import Foundation
import Logging


class AuthRepositoryMock: AuthRepository {
    init() { }


    private(set) var loginCallCount = 0
    var loginHandler: ((String, String) async throws -> ())?
    func login(id: String, password: String) async throws  {
        loginCallCount += 1
        if let loginHandler = loginHandler {
            try await loginHandler(id, password)
        }
        
    }

    private(set) var logoutCallCount = 0
    var logoutHandler: (() async -> ())?
    func logout() async  {
        logoutCallCount += 1
        if let logoutHandler = logoutHandler {
            await logoutHandler()
        }
        
    }
}

class UserRepositoryMock: UserRepository {
    init() { }


    private(set) var currentUserCallCount = 0
    var currentUserHandler: (() async throws -> (User))?
    func currentUser() async throws -> User {
        currentUserCallCount += 1
        if let currentUserHandler = currentUserHandler {
            return try await currentUserHandler()
        }
        fatalError("currentUserHandler returns can't have a default value thus its handler must be set")
    }
}

class LoggerMock: LoginChallenge.Logger {
    init() { }


    private(set) var infoCallCount = 0
    var infoHandler: ((String) -> ())?
    func info(_ message: String)  {
        infoCallCount += 1
        if let infoHandler = infoHandler {
            infoHandler(message)
        }
        
    }
}

